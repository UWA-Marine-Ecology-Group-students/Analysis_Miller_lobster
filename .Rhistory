map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste(unique(tag))
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste(unique(tag))
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
# Create html leaflet maps to show fishers
rm(list=ls()) # Clears memory
# librarys----
library(stringr)
library(tidyverse)
library(leaflet)
# Set work directory ----
work.dir=("C:/GitHub/Analysis_Miller_lobster") # For Brooke
# Sub directories ----
data.dir<-paste(work.dir,"Data",sep="/")
# Read in data ----
setwd(data.dir)
dir()
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))#%>%
metadata<-read.csv("metadata.csv")%>%
dplyr::filter(!Successful.count%in%c("No"))%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(!Source%in%c("ben-seven-mile"))
# Join data together ----
dat<-full_join(length,metadata)%>%
filter(!is.na(Latitude))
# Create a releases and a recaptures dataframe ----
dat.recaps<-dat%>%
filter(Recapture%in%c("TRUE"))%>%
dplyr::select(-c(Source,Sample,Recapture,Colour,Outlier,Location))
dat.releases<-dat%>%
filter(!Recapture%in%c("TRUE"))
dat.releases.caught.again<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Sex,Colour,Outlier,Location,Recapture,Carapace.length))%>%
filter(!is.na(Tag.number))
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
glimpse()
# Need dots for initial releases
dat.map.releases<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Colour,Outlier,Location,Recapture))%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". A ",Sex," lobster, first caught on  ",Release.date," (",Carapace.length," mm).",sep=""))%>%
filter(!is.na(Tag.number))%>%
glimpse()
pal <- colorFactor(c("blue", "pink"), domain =dat.map.recaptures$Sex)
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
View(dat.map.releases)
# Create html leaflet maps to show fishers
rm(list=ls()) # Clears memory
# librarys----
library(stringr)
library(tidyverse)
library(leaflet)
# Set work directory ----
work.dir=("C:/GitHub/Analysis_Miller_lobster") # For Brooke
# Sub directories ----
data.dir<-paste(work.dir,"Data",sep="/")
# Read in data ----
setwd(data.dir)
dir()
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))#%>%
#filter(Tag.number%in%c("191410","191033")) # Filter to see good test
metadata<-read.csv("metadata.csv")%>%
dplyr::filter(!Successful.count%in%c("No"))%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(!Source%in%c("ben-seven-mile"))
# Join data together ----
dat<-full_join(length,metadata)%>%
filter(!is.na(Latitude))
# Create a releases and a recaptures dataframe ----
dat.recaps<-dat%>%
filter(Recapture%in%c("TRUE"))%>%
dplyr::select(-c(Source,Sample,Recapture,Colour,Outlier,Location))
dat.releases<-dat%>%
filter(!Recapture%in%c("TRUE"))
dat.releases.caught.again<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Sex,Colour,Outlier,Location,Recapture,Carapace.length))%>%
filter(!is.na(Tag.number))
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
glimpse()
# Need dots for initial releases
dat.map.releases<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Colour,Outlier,Location,Recapture))%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". A ",Sex," lobster, first caught on  ",Release.date," (",Carapace.length," mm).",sep=""))%>%
filter(!is.na(Tag.number))%>%
glimpse()
pal <- colorFactor(c("pink","blue"), domain =dat.map.recaptures$Sex)
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
# Think I need to loop each tag to make the lines work ----
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
View(dat.map.all)
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude)%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
glimpse()
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
glimpse()
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
glimpse()
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
filter(Tag.number%in%c("191410","191033","K0287)) # Filter to see good test
metadata<-read.csv("metadata.csv")%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(Tag.number%in%c("191410","191033","K0287")) # Filter to see good test
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))#%>%
filter(Tag.number%in%c("191410","191033","K0287")) # Filter to see good test
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))%>%
filter(Tag.number%in%c("191410","191033","K0287")) # Filter to see good test
metadata<-read.csv("metadata.csv")%>%
dplyr::filter(!Successful.count%in%c("No"))%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(!Source%in%c("ben-seven-mile"))
# Join data together ----
dat<-full_join(length,metadata)%>%
filter(!is.na(Latitude))
# Create a releases and a recaptures dataframe ----
dat.recaps<-dat%>%
filter(Recapture%in%c("TRUE"))%>%
dplyr::select(-c(Source,Sample,Recapture,Colour,Outlier,Location))
dat.releases<-dat%>%
filter(!Recapture%in%c("TRUE"))
dat.releases.caught.again<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Sex,Colour,Outlier,Location,Recapture,Carapace.length))%>%
filter(!is.na(Tag.number))
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
glimpse()
# Need dots for initial releases
dat.map.releases<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Colour,Outlier,Location,Recapture))%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". A ",Sex," lobster, first caught on  ",Release.date," (",Carapace.length," mm).",sep=""))%>%
filter(!is.na(Tag.number))%>%
glimpse()
pal <- colorFactor(c("pink","blue"), domain =dat.map.recaptures$Sex)
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
# Create html leaflet maps to show fishers
rm(list=ls()) # Clears memory
# librarys----
library(stringr)
library(tidyverse)
library(leaflet)
# Set work directory ----
work.dir=("C:/GitHub/Analysis_Miller_lobster") # For Brooke
# Sub directories ----
data.dir<-paste(work.dir,"Data",sep="/")
# Read in data ----
setwd(data.dir)
dir()
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))#%>%
metadata<-read.csv("metadata.csv")%>%
dplyr::filter(!Successful.count%in%c("No"))%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(!Source%in%c("ben-seven-mile"))
# Join data together ----
dat<-full_join(length,metadata)%>%
filter(!is.na(Latitude))
# Create a releases and a recaptures dataframe ----
dat.recaps<-dat%>%
filter(Recapture%in%c("TRUE"))%>%
dplyr::select(-c(Source,Sample,Recapture,Colour,Outlier,Location))
dat.releases<-dat%>%
filter(!Recapture%in%c("TRUE"))
dat.releases.caught.again<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Sex,Colour,Outlier,Location,Recapture,Carapace.length))%>%
filter(!is.na(Tag.number))
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
glimpse()
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
ungroup()%>%
glimpse()
# Need dots for initial releases
dat.map.releases<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Colour,Outlier,Location,Recapture))%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". A ",Sex," lobster, first caught on  ",Release.date," (",Carapace.length," mm).",sep=""))%>%
filter(!is.na(Tag.number))%>%
glimpse()
pal <- colorFactor(c("pink","blue"), domain =dat.map.recaptures$Sex)
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
map.dots <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.dots
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
# Set work directory ----
work.dir=("C:/GitHub/Analysis_Miller_lobster") # For Brooke
# Create html leaflet maps to show fishers
rm(list=ls()) # Clears memory
# librarys----
library(stringr)
library(tidyverse)
library(leaflet)
# Set work directory ----
work.dir=("C:/GitHub/Analysis_Miller_lobster") # For Brooke
# Sub directories ----
data.dir<-paste(work.dir,"Data",sep="/")
# Read in data ----
setwd(data.dir)
dir()
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))#%>%
filter(Tag.number%in%c("191410","191033","K0287","K0966","K0712","K0477")) # Filter to see good test
length<-read.csv("length.csv")%>%
dplyr::select(Source,Sample,Tag.number,Recapture,Sex,Colour,Outlier,Carapace.length)%>%
#filter(!Outlier%in%c("y"))%>%
filter(!Tag.number%in%c("K3211"))%>%
filter(Tag.number%in%c("191410","191033","K0287","K0966","K0712","K0477")) # Filter to see good test
metadata<-read.csv("metadata.csv")%>%
dplyr::filter(!Successful.count%in%c("No"))%>%
dplyr::distinct(Source,Sample,Location,Latitude,Longitude,Date)%>%
filter(!Source%in%c("ben-seven-mile"))
# Join data together ----
dat<-full_join(length,metadata)%>%
filter(!is.na(Latitude))
# Create a releases and a recaptures dataframe ----
dat.recaps<-dat%>%
filter(Recapture%in%c("TRUE"))%>%
dplyr::select(-c(Source,Sample,Recapture,Colour,Outlier,Location))
dat.releases<-dat%>%
filter(!Recapture%in%c("TRUE"))
dat.releases.caught.again<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Sex,Colour,Outlier,Location,Recapture,Carapace.length))%>%
filter(!is.na(Tag.number))
# Create data for map ----
# Good tag to check 191410 (to see if everything has worked)
dat.map.recaptures<-dat.releases.caught.again%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>% #
left_join(dat.recaps)%>%
bind_rows(dat.releases.caught.again)%>%
arrange(Tag.number,Date)%>%
group_by(Tag.number)%>%
mutate(Release.latitude=lag(Latitude))%>%
mutate(Release.longitude=lag(Longitude))%>%
mutate(Release.date=lag(Date))%>%
filter(!is.na(Sex))%>%
dplyr::rename(Recapture.latitude=Latitude,Recapture.longitude=Longitude,Recapture.date=Date)%>%
mutate(Days.between.captures = (as.Date(as.character(Recapture.date), format="%Y-%m-%d")) - (as.Date(as.character(Release.date))))%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". At liberty for ",Days.between.captures," days before being caught again on ",Recapture.date," (",Carapace.length," mm).",sep=""))%>%
ungroup()%>%
glimpse()
# Need dots for initial releases
dat.map.releases<-semi_join(dat.releases,dat.recaps,by="Tag.number")%>%
dplyr::select(-c(Source,Sample,Colour,Outlier,Location,Recapture))%>%
dplyr::rename(Release.latitude=Latitude,Release.longitude=Longitude,Release.date=Date)%>%
dplyr::mutate(Labels=paste("Tag ",Tag.number,". A ",Sex," lobster, first caught on  ",Release.date," (",Carapace.length," mm).",sep=""))%>%
filter(!is.na(Tag.number))%>%
glimpse()
pal <- colorFactor(c("pink","blue"), domain =dat.map.recaptures$Sex)
map.all.leaflet <- leaflet(dat.map.recaptures) %>%
fitBounds(~min(Recapture.longitude), ~min(Recapture.latitude), ~max(Recapture.longitude), ~max(Recapture.latitude))%>%
addTiles()%>%
addCircleMarkers(data=dat.map.recaptures,~Recapture.longitude,~Recapture.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))%>%
addCircleMarkers(data=dat.map.releases,~Release.longitude,~Release.latitude,radius = 4,color = ~pal(Sex),stroke = FALSE, fillOpacity = 0.5,popup = ~as.character(Labels))
map.all.leaflet
dat.map.all<-bind_rows(dat.map.releases,dat.map.recaptures)%>%
arrange(Tag.number,Release.date)%>%
mutate(Release.latitude=ifelse(((!Release.latitude==Recapture.latitude)&(!is.na(Recapture.latitude))),Recapture.latitude,Release.latitude))%>% # So if release and recapture are both not na and are different then release = recapture this is two get a line when only recaptured once
mutate(Release.longitude=ifelse(((!Release.longitude==Recapture.longitude)&(!is.na(Recapture.longitude))),Recapture.longitude,Release.longitude))%>%
glimpse()
uniq <- unique(unlist(dat.map.all$Tag.number))
uniq
for (i in 1:length(uniq)){
temp.dat <- subset(dat.map.all, Tag.number == uniq[i])
tag<-temp.dat$Tag.number
tag<-paste("currently plotting",unique(tag),sep=" ")
print(tag)
map.all.leaflet <- map.all.leaflet%>%
addPolylines(data=temp.dat, ~Release.longitude,~Release.latitude, group = ~Tag.number,weight = 1,fillOpacity = 0.5)
}
map.all.leaflet
